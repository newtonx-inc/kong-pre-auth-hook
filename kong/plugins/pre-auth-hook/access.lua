local Filters = require('kong.plugins.pre-auth-hook.filters')
local Utilities = require('kong.plugins.pre-auth-hook.utilities')

local Access = {}


local function stripHeaders(config)
    -- Strips out headers that are meant to be generated by auth plugins, plus any additional specified
    -- Returns: Nothing

    -- List out default headers
    local headersToStrip = {
        'X-Consumer-ID',
        'X-Consumer-Custom-ID',
        'X-Consumer-Username',
        'X-Credential-Identifier',
        'X-Anonymous-Consumer',
        'X-User-Info',
        'X-Auth-Mechanism',
        'X-Skip-Kong-Auth',
        'X-Consumer-Group-Memberships',
    }
    -- Combine with additional headers from config
    for _, val in ipairs(config.strip_headers or {}) do
        table.insert(headersToStrip, val)
    end

    -- Strip out each one from the request, if it exists
    for _, header in ipairs(headersToStrip) do
        -- If header exists, set its value to an empty string
        -- Otherwise, do nothing
        if kong.request.get_header(header) then
            kong.service.request.set_header(header, '')
        end
    end
end

local function checkIfRequestNeedsAuth(config)
    -- Looks at the "match-*" specifications in the config object and determines whether the request needs auth
    -- Returns: bool
    local f = Filters:new(config)
    return f:checkMatchingAll()
end

function Access:start(config)
    -- Main business logic for this plugin
    -- Returns: nothing

    -- Init
    kong.log.debug("[access.lua] : Starting Nx Kong Pre Auth Hook...")

    -- Strip headers for safety, to prevent spoofing.
    kong.log.debug("[access.lua] : Stripping headers")
    stripHeaders(config)

    -- Checks if conditions are met for auth
    kong.log.debug("[access.lua] : Checking if request requires auth")
    local doesNeedAuth = checkIfRequestNeedsAuth(config)
    if doesNeedAuth then
        kong.log.debug("[[access.lua] : This request does indeed need auth. Will proceed as normal.")
    else
        -- If the request does not need auth, inject an anonymous consumer and credential so that subsequent auth plugins
        -- know to ignore.
        kong.log.debug("[access.lua] : Request does not require auth. Injecting anonymous consumer info into headers.")
        local utilities = Utilities:new(config)
        utilities.skipAuth()
    end
end

return Access